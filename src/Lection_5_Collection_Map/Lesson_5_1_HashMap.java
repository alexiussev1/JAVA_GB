package Lection_5_Collection_Map;

//HashMap
//        Map – это множество коллекций, работающих с данными
//        по принципу <Ключ / Значение>.
//        Ключевые особенности:
//        ● ускоренная обработка данных;
//        ● порядок добавления не запоминается.
//        ● ускоренная обработка данных;
//        ● порядок добавления не запоминается.

//        В HashMap элементы располагаются как угодно и могут
//        менять свое положение.

//        put(K,V) – добавить пару если или изменить значение,если ключ имеется.
//        putIfAbsent(K,V) – произвести добавление если ключ не найден.
//        get(K) - получение значения по указанному ключу.
//        remove(K) – удаляет пару по указанному ключу.
//        containsValue(V) – проверка наличия значения.
//        containsKey(V) – проверка наличия ключа.
//        keySet() – возвращает множество ключей.
//        values() – возвращает набор значений.

import java.util.HashMap;
import java.util.Map;

public class Lesson_5_1_HashMap {
    public static void main(String[] args) {
        Map<Integer, String> db = new HashMap<>();
        db.putIfAbsent(1, "один"); // (ключ, значение)
        db.put(2, "!null"); // (ключ, значение)
        db.put(null, "!null");
        System.out.println(db);

        for (var item : db.entrySet()) {
            System.out.printf("[%d: %s]\n", item.getKey(), item.getValue());
        }

//        HashMap. Важное дополнение #2. Скорость
//        Как ускорить работу
        Map<Integer, String> map1 = new HashMap<>(); //создается Хэш с какой-то длиной
        Map<Integer, String> map2 = new HashMap<>(9);
        //создается Хэш с длиной 9 элементов, при заполнении 70% автоматически увеличивается
        Map<Integer, String> map3 = new HashMap<>(9, 1.0f); //...п
        //создается Хэш с длиной 9 элементов, при заполнении 100% автоматически увеличивается в 2 раза


        //HashMap. Любознательным
        //● Хэш-функции и хэш-таблицы
        //● Прямое связывание (хэширование с цепочками)
        //● Хэширование с открытой адресацией
        //● Теория графов:
            //● деревья построенные на списках
            //● бинарные деревья
            //● сбалансированные деревья
            //● *алгоритм балансировки дерева
            //● ** красно-черные деревья, деревья поиска

    }
}
